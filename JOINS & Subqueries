-- Project 7: Common Task
-- Keith Swartz

-- 1. Find any products that have not appeared on an order, ever. (LEFT JOIN, WHERE IS NULL)

SELECT Products.ProductID,
       Products.ProductName
FROM Products
   LEFT JOIN [Order Details] ON Products.ProductID = [Order Details].ProductID
WHERE [Order Details].ProductID IS NULL
ORDER BY Products.ProductID

-- 2. Find any products that have not appeared on an order in 1996. (subquery with NOT IN)

SELECT DISTINCT [Order Details].ProductID
FROM [Order Details]
WHERE [Order Details].ProductID NOT IN (SELECT [Order Details].ProductID
                                        FROM [Order Details]
                                        JOIN Orders ON [Order Details].OrderID = Orders.OrderID
                                        WHERE YEAR(Orders.OrderDate) = (1996))
ORDER BY [Order Details].ProductID


-- 3. Find any customers who have not placed an order, ever (similar to #1).

SELECT Customers.CustomerID,
       Customers.CompanyName
FROM Customers
   LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
WHERE Orders.CustomerID IS NULL
ORDER BY Customers.CustomerID

-- 4. Find any customers that did not place an order in 1996 (similar to #2).

SELECT DISTINCT Customers.CustomerID
FROM Customers
WHERE Customers.CustomerID NOT IN (SELECT Customers.CustomerID
                                        FROM Customers
                                        JOIN Orders ON Customers.CustomerID = Orders.CustomerID
                                        WHERE YEAR(Orders.OrderDate) = (1996))
ORDER BY Customers.CustomerID

-- 5. List all products that have been sold (any date). We need this to run fast, and we don't really want to see anything from the [order details] table, so use EXISTS.

SELECT Products.ProductID
FROM   Products
WHERE  EXISTS 
         (SELECT *
          FROM   [Order Details]
          WHERE  Products.ProductID = [Order Details].ProductID)
ORDER BY ProductID

-- 6. Give all details of all the above-average priced products. (simple subquery)

SELECT *
FROM Products
WHERE Products.UnitPrice > (SELECT AVG(Products.UnitPrice)
                            FROM Products)
ORDER BY Products.ProductID

-- 7. Find all orders where the ShipName has non-ASCII characters in it (trick: WHERE shipname <> CAST(ShipName AS VARCHAR).

SELECT CAST(Orders.ShipName AS VARCHAR)
FROM Orders
WHERE CAST(Orders.ShipName AS VARCHAR) LIKE  '%[' 
         + char(33) + '-' + char(47) 
         + char(58) + '-' + char(64) 
         + char(91) + '-' + char(96) 
         + char(123)+ '-' + char(126)
         + ']%' 
ORDER BY CAST(Orders.ShipName AS VARCHAR)
-- 8. Show all Customers' CompanyName and region. Replace any NULL region with the word 'unknown'. Use the ISNULL() function. (Do a search on SQL ISNULL)

SELECT Customers.CompanyName,
       ISNULL(Customers.Region ,'unknown') AS 'Customer Region'
FROM Customers
ORDER BY CompanyName

-- 9. We need to know a list of customers (companyname) who paid more than $100 for freight on an order in 1996 (based on orderdate). Use the ANY operator to get this list. (We are expecting this to have to run often on billions of records. This could be done much less efficiently with a JOIN and DISTINCT.)

SELECT Customers.CompanyName
FROM   Customers
WHERE    $100 < ANY (SELECT  freight
                     FROM    Orders
                     WHERE   Orders.CustomerID = Customers.CustomerID
                     AND     YEAR(Orderdate) = 1996)
ORDER BY CustomerID

-- 10. We want to know a list of customers (companyname) who paid more than $100 for freight on all of their orders in 1996 (based on orderdate). Use the ALL operator. (We are expecting this to have to run often on billions of records. This could be done much less efficiently using COUNTs.)

SELECT Customers.CompanyName
FROM   Customers
WHERE    $100 < ALL (SELECT  freight
                     FROM    Orders
                     WHERE   Orders.CustomerID = Customers.CustomerID
                     AND     YEAR(Orderdate) = 1996)
ORDER BY CustomerID

-- 11. Darn! These unicode characters are messing up a downstream system. How bad is the problem? List all orders where the shipName has characters in it that are not upper case letters A-Z or lower case letters a-z. Use LIKE to do this. (see the LIKE video, and use '%[^a-zA-Z]%'

SELECT DISTINCT (Orders.ShipName )
FROM Orders
WHERE (Orders.ShipName) LIKE  '%[^a-zA-Z ]%' 
Order BY ShipName


