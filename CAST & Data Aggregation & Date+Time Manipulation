-- Project 6 
-- Keith Swartz

-- 1. Show the CategoryName, Description, and number of products in each category. You will have trouble grouping by Category.Description, because of its data type.

SELECT Categories.CategoryName,
       CAST(Categories.[Description] AS VARCHAR) AS 'Category Description',
       COUNT(Products.ProductID) AS '# of Products in Category'
FROM Categories
   JOIN Products ON Categories.CategoryID = Products.CategoryID
WHERE Categories.[Description] IS NOT NULL
GROUP BY Categories.CategoryName, CAST(Categories.[Description] AS VARCHAR)
ORDER BY CategoryName



-- 2. We want to know the percentage of buffer stock we hold on every product. We want to see this as a percentage above/below the reorderLevel. Show the ProductID, productname, unitsInstock, reOrderLevel, and the percent above/below the reorderlevel. So if unitsInstock is 13 and the reorderLevel level is 10, the percent above/below would be 0.30. Make sure you convert at the appropriate times to ensure no rounding occurs. Check your work carefully.

SELECT Products.ProductID,
       Products.ProductName,
       Products.UnitsInStock,
       Products.ReorderLevel,
       (CAST(Products.UnitsInStock AS float) - CAST(Products.ReorderLevel AS float))/ Cast(Products.ReorderLevel AS float) AS 'Percent Above/Below the Reorder Level'
FROM   Products
WHERE ReorderLevel <> 0
ORDER BY Products.ProductID

-- 3. Show the orderID, orderdate, and total amount due for each order, including freight. Make sure that the amount due is a money data type and that there is no loss in accuracy as conversions happen. Do not do any unnecessary conversions. The trickiest part of this is the making sure that freight is NOT in the SUM.

SELECT Orders.OrderID,
       Orders.OrderDate,
       Cast(SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS money) + Orders.Freight AS "Amount Due"
FROM   Orders
   JOIN [Order Details] ON [Order Details].OrderID = Orders.OrderID
GROUP BY Orders.OrderID,
         Orders.OrderDate,
         Orders.Freight
ORDER BY  Orders.OrderID

-- 4. Our company is located in Wilmington NC, the eastern time zone (UTC-5). We've been mostly local, but are now doing business in other time zones. Right now all of our dates in the orders table are actually our server time, and the server is located in an Amazon data center outside San Francisco, in the pacific time zone (UTC-8). 
-- For only the orders we ship to France, show the orderID, customerID, orderdate in UTC-5, and the shipped date in UTC+1 (France's time zone.) You might find the TODATETIMEOFFSET() function helpful in this regard, and also the SWITCHOFFSET() function.. Remember the implied time zone (EST) when you do this.

SELECT Orders.OrderID,
       Orders.CustomerID,
       TODATETIMEOFFSET(DATEADD(HOUR,+3,(Orders.OrderDate)),'+03:00') AS 'Order Date',
       TODATETIMEOFFSET(DATEADD(HOUR,+9,(Orders.ShippedDate)),'+09:00') AS 'Shipped Date'
FROM Orders
WHERE ShipCountry = 'France'
ORDER BY Orders.OrderDate DESC

-- 5. We are realizing that our data is taking up more space than necessary, which is making some of our regular data become "big data", in other words, difficult to deal with. In preparation for a data migration, we'd like to convert many of the fields in the Customers table to smaller data types. We anticipate having 1 million customers, and this conversion could save us up to 58MB on just this table. Do a SELECT statement that shows all fields in the table, in their original order, and rows ordered by customerID, with these fields converted:
-- CustomerID converted to CHAR(5) - saves at least 5 bytes per record
-- PostalCode converted to VARCHAR(10) - saves up to 5 bytes per record
-- Phone converted to VARCHAR(24) - saves up to 24 bytes per record
-- Fax converted to VARCHAR(24) - saves up to 24 bytes per record

SELECT Cast(Customers.CustomerID AS CHAR(5)) AS 'CustomerID',
       Customers.CompanyName,
       Customers.ContactName,
       Customers.ContactTitle,
       Customers.Address,
       Customers.City,
       Customers.Region,
       CAST(Customers.PostalCode AS VARCHAR(10)) AS 'Postal Code',
       Customers.Country,
       CAST(Customers.Phone AS VARCHAR(24)) AS 'Phone',
       CAST(Customers.Fax AS VARCHAR(24)) AS 'Fax'
FROM Customers
ORDER BY CustomerID

-- 6. Show a list of products, their unit price, and their ROW_NUMBER() based on price, ASC. Order the records by productname.

SELECT Products.ProductID,
       Products.ProductName,
       Products.UnitPrice,
       ROW_NUMBER() OVER (ORDER BY Products.UnitPrice ASC) AS [Ranking Products by Price]
FROM Products


-- 7. Do #6, but show the DENSE_RANK() based on price, ASC, rather than ROW_NUMBER().

SELECT Products.ProductID,
       Products.ProductName,
       Products.UnitPrice,
       DENSE_RANK() OVER (ORDER BY Products.UnitPrice ASC) AS [Ranking Products by Price]
FROM Products

-- 8. Show a list of products ranked by price into three categories based on price: 1, 2, 3. The highest 1/3 of the products will be marked with a 1, the second 1/3 as 2, the last 1/3 as 3. HINT: this is NTILE(3), order by unitprice DESC.

SELECT Products.ProductName,
       Products.UnitPrice,
       NTILE(3) OVER (ORDER BY Products.UnitPrice DESC) AS 'Price Category'
FROM Products

-- 9. Show a list of products from categories 1, 2, 7, 4 and 5. Show their RANK() based on value in inventory.

SELECT Products.ProductName,
       Products.CategoryID,
       RANK() OVER (ORDER BY Products.UnitPrice * Products.UnitPrice) AS 'Value of Inventory'
FROM   Products
WHERE CategoryID = 1 OR CategoryID = 2 OR CategoryID = 7 OR CategoryID =4 OR CategoryID = 5

-- 10. Show a list of orders, ranked based on freight cost, highest to lowest. Order the orders by the orderdate.

SELECT Orders.OrderID,
       Orders.OrderDate,
       Orders.Freight,
       RANK() OVER (ORDER BY Orders.Freight DESC) AS 'Rank Based on Freight Cost'
FROM Orders
ORDER BY Orders.OrderDate


